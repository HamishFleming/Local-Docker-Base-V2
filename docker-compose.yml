version: "3.9"
services:
  step-ca:
    image: smallstep/step-ca
    environment:
      DOCKER_STEPCA_INIT_NAME: Smallstep
      DOCKER_STEPCA_INIT_DNS_NAMES: dev.local,local
      DOCKER_STEPCA_INIT_PROVISIONER_NAME: admin
      DOCKER_STEPCA_INIT_PASSWORD: pass123
    networks:
      static-network:
        aliases:
          - "ca"
      traefik-net:
        aliases:
          - "ca.dev.local"
    ports:
      - 9000:9000
    volumes:
      - ./data/step-ca:/home/step
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ca-web.entrypoints=web"
      - "traefik.http.routers.ca-web.rule=Host(`ca.dev.local`)"

      - "traefik.http.middlewares.ca-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.ca-web.middlewares=ca-redirect"

      - "traefik.http.routers.ca-websecure.entrypoints=websecure"
      - "traefik.http.routers.ca-websecure.rule=Host(`ca.dev.local`)"
      - "traefik.http.services.ca.loadbalancer.server.port=9000"
      - "traefik.http.routers.ca-websecure.tls=true"
      - "traefik.http.routers.ca-websecure.tls.certresolver=myresolver"
  # Start the agent with the latest version
  # hub-agent:
  #   image: ghcr.io/traefik/hub-agent-traefik:experimental
  #   # pull_policy: always
  #   container_name: hub-agent
  #   dns:
  #     - 1.1.1.1
  #     - 1.0.0.1
  #     - 8.8.8.8
  #   command:
  #     - run
      # - --hub.token=1c8b7e7b-b326-4913-b1b1-d8dc421af015
  #     - --auth-server.advertise-url=http://hub-agent
  #     - --traefik.host=traefik
  #     - --traefik.tls.insecure=true
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - traefik
  traefik:
    image: traefik:v2.4
    depends_on:
      - step-ca
    networks:
      static-network:
        ipv4_address: 11.100.100.10
      traefik-net:
        aliases:
          - "traefik"
          - "traefik.dev.local"
          - "whoami.dev.local"
          - "portainer.dev.local"
    command:
      # - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traf-external"
      - "--providers.file.watch=true"
      - "--accesslog=false"
      - "--log=true"
      - "--log.level=DEBUG"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesResolvers.myresolver.acme.tlsChallenge=true"
      - "--certificatesResolvers.myresolver.acme.email=admin"
      - "--certificatesResolvers.myresolver.acme.storage=/etc/acme/acme.json"
      - "--certificatesresolvers.myresolver.acme.caserver=https://ca.dev.local:9000/acme/acme/directory"
      - "--certificatesResolvers.myresolver.acme.httpChallenge=true"
      - "--certificatesResolvers.myresolver.acme.httpChallenge.entryPoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./data/traefik/acme:/etc/acme
      - ./data/step-ca/certs/root_ca.crt:/usr/local/share/ca-certificates/my_root_ca.crt
      - ./site_home_local.crt:/certs/wild_dev_local.crt:ro
      - ./site_home_local.key:/certs/wild_dev_local.key:ro
      - ./ca.crt:/certs/ca.crt
      - ./traefik_config/traefik.yml:/traefik.yml:ro
      - ./traefik_config/log/access.log:/log/access.log
      - ./traefik_config/acme/acme.json:/etc/acme/acme.json
      - ./traefik_config/configurations:/configurations
    environment:
      LEGO_CA_CERTIFICATES: "/usr/local/share/ca-certificates/my_root_ca.crt"
      LEGO_CA_SERVER_NAME: "ca.dev.local"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik0.entrypoints=web"
      - "traefik.http.routers.traefik0.rule=Host(`traefik.dev.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

      - "traefik.http.middlewares.traefik-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik0.middlewares=traefik-redirect"

      - "traefik.http.routers.traefik1.entrypoints=websecure"
      - "traefik.http.routers.traefik1.rule=Host(`traefik.dev.local`)"
      - "traefik.http.routers.traefik1.tls=true"
      - "traefik.http.routers.traefik1.tls.certresolver=myresolver"

  whoami:
    image: containous/whoami:latest
    hostname: "whoami1"
    networks:
      traefik-net:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami0.entrypoints=web"
      - "traefik.http.routers.whoami0.rule=Host(`whoami.dev.local`)"

      - "traefik.http.middlewares.whoami-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.whoami0.middlewares=whoami-redirect"

      - "traefik.http.routers.whoami1.entrypoints=websecure"
      - "traefik.http.routers.whoami1.rule=Host(`whoami.dev.local`)"
      - "traefik.http.routers.whoami1.tls=true"
      - "traefik.http.routers.whoami1.tls.certresolver=myresolver"

  portainer:
    image: portainer/portainer-ee:latest
    command: -H unix:///var/run/docker.sock
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      - ./docker/portainer/data:/data
    networks:
      traefik-net:
        aliases:
          - "portainer.dev.local"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-web.entrypoints=web"
      - "traefik.http.routers.portainer-web.rule=Host(`portainer.dev.local`)"

      - "traefik.http.middlewares.portainer-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.portainer-web.middlewares=portainer-redirect"

      - "traefik.http.routers.portainer-websecure.entrypoints=websecure"
      - "traefik.http.routers.portainer-websecure.rule=Host(`portainer.dev.local`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer-websecure.tls=true"
      - "traefik.http.routers.portainer-websecure.tls.certresolver=myresolver"


####DB for Authelia
  mariadb:
    container_name: authelia_mariadb
    image: mariadb:$MARIAVERSION
    hostname: authelia_mariadb
    restart: always
    networks:
      traefik-net:
    volumes:
      - ./docker/mariadb/config:/config
      - ./docker/mariadb/mysql:/var/lib/mysql
    expose:
      - 3306
    environment:
      - MYSQL_ROOT_PASSWORD=$AUTHELIA_MYSQL_ROOT_PASSWORD
      - MYSQL_USER=$AUTHELIA_MYSQL_USER
      - MYSQL_DATABASE=$AUTHELIA_MYSQL_DATABASE
      - MYSQL_PASSWORD=$AUTHELIA_MYSQL_PASSWORD
    labels:
      - traefik.enable=false
####GUI managament for mariadb
  phpmyadmin:
    container_name: authelia_phpmyadmin
    image: phpmyadmin/phpmyadmin:$PHPMYADMINVERSION
    depends_on:
      - mariadb
    restart: always
    expose:
      - 80
    networks:
      traefik-net:
    environment:
      PMA_HOSTS: authelia_mariadb
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.phpmyadmin-http-rtr.rule=Host(`db.$DOMAINNAME`)
      - traefik.http.routers.phpmyadmin-http-rtr.entrypoints=web
      - traefik.http.routers.phpmyadmin-https-rtr.rule=Host(`db.$DOMAINNAME`)
      - traefik.http.routers.phpmyadmin-https-rtr.entrypoints=websecure
      - traefik.http.routers.phpmyadmin-https-rtr.tls=true
      - traefik.http.routers.phpmyadmin-https-rtr.tls.certresolver=myresolver
      ## Middlewares Rules
      - traefik.http.routers.phpmyadmin-http-rtr.middlewares=middlewares-https-redirect@file
      - traefik.http.routers.phpmyadmin-https-rtr.middlewares=chain-authelia@file
####redis Cache for authelia
  redis:
    container_name: authelia_redis
    image: redis:alpine
    restart: always
    volumes:
      - ./docker/redis:/data
    networks:
      traefik-net:
    expose:
      - 6379
    environment:
      - TZ=$TZ
    labels:
      - traefik.enable=false
####Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    image: authelia/authelia:$AUTHELIAVERSION
    restart: always
    depends_on:
      - mariadb
      - phpmyadmin
      - redis
    ports:
      - 9091:9091
    expose:
      - 9091
    environment:
      - TZ=$TZ
    volumes:
      - ./docker/authelia/authelia:/var/lib/authelia
      - ./docker/authelia/configuration.yml:/etc/authelia/configuration.yml:ro
      - ./docker/authelia/users_database.yml:/etc/authelia/users_database.yml
    networks:
      traefik-net:
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.authelia.rule=Host(`auth.$DOMAINNAME`)
      - traefik.http.routers.authelia.entrypoints=web,websecure
      - traefik.http.routers.authelia.tls=true
      - traefik.http.routers.authelia.tls.certresolver=myresolver
####Dozzle is a simple, a web based interface to monitor your Docker container logs
  dozzle:
    container_name: dozzle_logs
    image: amir20/dozzle:$DOZZLEVERSION
    restart: always
    networks:
      traefik-net:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    labels:
      - traefik.enable=false
####Mailhog For Local Testing
  mailhog:
    container_name: mailhog
    restart: always
    image: mailhog/mailhog:latest
    expose:
      - 8025
    ports:
      - 1025:1025 # smtp server
      - 8025:8025
    networks:
      traefik-net:
        aliases:
          - "mailhog"
          - "mailhog.${DOMAINNAME}"
      mailhog:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mailhog.{$DOMAINNAME}`)"
      - "traefik.http.routers.mailhog.service=mailhog"
      - "traefik.http.routers.mailhog.entrypoints=web,websecure"
      # Should be false
      - "traefik.http.routers.mailhog.tls=false"
      - "traefik.http.middlewares.redirectos.redirectscheme.scheme=https"
      - "traefik.http.routers.mailhog.middlewares=redirectos"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
    # labels:
    #   - traefik.enable=true
    #   - traefik.http.routers.mailhog.rule=Host(`mailhog.{DOMAINNAME}`)
    #   - "traefik.http.routers.mailhog.entrypoints=web"
    #   - traefik.http.routers.mailhog-secure.rule=Host(`mailhog.{DOMAINNAME}`)
    #   - "traefik.http.routers.mailhog-secure.entrypoints=websecure"
    #   - traefik.http.services.mailhog-secure.loadbalancer.server.port=8025
    #   - "traefik.http.routers.mailhog-secure.tls=false"
    #   - traefik.http.routers.mailhog-secure.tls.certresolver=myresolver
####whoami test in front page
  whoami:
    container_name: frontpage
    image: containous/whoami
    restart: always
    depends_on:
      - traefik
    expose:
      - 80
    networks:
      traefik-net:
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.whoami-http-rtr.rule=Host(`test.$DOMAINNAME`)
      - traefik.http.routers.whoami-http-rtr.entrypoints=web
      - traefik.http.routers.whoami-https-rtr.rule=Host(`test.$DOMAINNAME`)
      - traefik.http.routers.whoami-https-rtr.entrypoints=websecure
      - traefik.http.routers.whoami-https-rtr.tls=true
      - traefik.http.routers.whoami-https-rtr.tls.certresolver=myresolver
      ## Middlewares Rules
      - traefik.http.routers.whoami-http-rtr.middlewares=middlewares-https-redirect@file
      - traefik.http.routers.whoami-https-rtr.middlewares=chain-authelia@file


volumes:
  portainer_data:

########################### NETWORKS
# Create proxy network
# $ docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 proxy
networks:
  mailhog:
  traefik-net:
    external: true
    name: traf-external
    # name: traf-external
  static-network:
    ipam:
      config:
        - subnet: 11.100.100.0/24

  default:
    driver: bridge
