###############################################################
#                   Authelia configuration                    #
###############################################################

# host: auth.localhost
host: 0.0.0.0
port: 9091
log_level: debug
# I used this site to generate the secret: https://www.grc.com/passwords.html
jwt_secret: abc
default_redirection_url: https://auth.dev.local
# default_redirection_url: https://portainer.dev.local/
# redirect_uris:
#   - https://portainer.dev.local/
#   - https://auth.dev.local
totp:
  issuer: authelia.com
# customize passwords based on https://docs.authelia.com/configuration/authentication/file.html
authentication_backend:
# disable_reset_password: false
  file:
    path: /etc/authelia/users_database.yml
# Enable the following for Duo Push Notification support
# Duo Free-Free up to 10 users
# duo_api:
#     hostname: GENERATE IN DUO APP
#     integration_key: GENERATE IN DUO APP
#     secret_key: GENERATE IN DUO APP
# https://docs.authelia.com/configuration/access-control.html
access_control:
  default_policy: deny
  rules:
#wildcard domain allowed to use double authentication for all services used byiteria
    # - domain: "*.DOMAIN.COM"
    #   policy: two_factor
    - domain: traefik.dev.local
      policy: one_factor
    - domain: portainer.dev.local
      policy: one_factor
    - domain: phpmyadmin.dev.local
      policy: one_factor
    - domain: files.dev.local
      policy: one_factor
    - domain: "*.dev.local"
      policy: one_factor
    # - domain: localhost
    #   policy: two_factor
session:
  name: authelia_session
# Used a different secret, but the same site as jwt_secret above.
# session cookies to authenticate users
  secret: abc
  expiration: 3600 # 1 hour
  inactivity: 300 # 5 minutes
  domain: dev.local
  redis:
    host: redis
    port: 6379
    # password: authelia
regulation:
  max_retries: 3
  find_time: 120
  ban_time: 300
storage:
# supports more than one database
# in this case a local **file** is used as the "user" store and the other records go to **mysql**
  local:
    path: /var/lib/authelia/db.sqlite3
  mysql:
    host: authelia_mariadb
    port: 3306
    database: authelia
    username: authelia
    password: YOUR_PASSWORD
notifier:
  disable_startup_check: true
  smtp:
    disable_require_tls: true
    username: ''
    # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
    password: ''
    host: mailhog
    port: 1025
    sender: admin@example.com
# # notifier:
# #   # Note Authelia tory only supports 1 notification method
# #   smtp:
# #     username: YOURREMAIL@DOMAIN.COM
# #     password: YOUR_PASSWORD
# #     sender: YOURREMAIL@DOMAIN.COM
# #     host: smtp.gmail.com
# #     port: 587
# #
# # #  filesystem:
# # #    filename: /tmp/authelia/notification.txt
# notifier:
#   filesystem:
#     filename: /config/notification.txt



# - id: portainer
#   description: Portainer
#   secret: '$plaintext$portainer_client_secret'
#   public: false
#   authorization_policy: one_factor
#   jwt_secret: abc
#   redirect_uris:
#     - https://portainer.dev.local/
#   scopes:
#     - openid
#     - profile
#     - groups
#     - email
#   userinfo_signing_algorithm: none
#


authentication_backend:
  ldap:
    ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
    ## Acceptable options are as follows:
    ## - 'activedirectory' - For Microsoft Active Directory.
    ## - 'custom' - For custom specifications of attributes and filters.
    ## This currently defaults to 'custom' to maintain existing behaviour.
    ##
    ## Depending on the option here certain other values in this section have a default value, notably all of the
    ## attribute mappings have a default value that this config overrides, you can read more about these default values
    ## at https://www.authelia.com/docs/configuration/authentication/ldap.html#defaults
    # implementation: custom

    ## The url to the ldap server. Format: <scheme>://<address>[:<port>].
    ## Scheme can be ldap or ldaps in the format (port optional).
    url: ldap://openldap

    ## Use StartTLS with the LDAP connection.
    # start_tls: false
    # tls:
    #   server_name: ldap.example.com
    #   skip_verify: false
    # tls:
      ## Server Name for certificate validation (in case it's not set correctly in the URL).
      # server_name: ldap.example.com

      ## Skip verifying the server certificate (to allow a self-signed certificate).
      ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
      ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
      # skip_verify: false

      ## Minimum TLS version for either Secure LDAP or LDAP StartTLS.
      # minimum_version: TLS1.2

    ## The distinguished name of the container searched for objects in the directory information tree.
    ## See also: additional_users_dn, additional_groups_dn.
    base_dn: dc=dev,dc=local

    ## The attribute holding the username of the user. This attribute is used to populate the username in the session
    ## information. It was introduced due to #561 to handle case insensitive search queries. For you information,
    ## Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP usually uses 'uid'. Beware that this
    ## attribute holds the unique identifiers for the users binding the user and the configuration stored in database.
    ## Therefore only single value attributes are allowed and the value must never be changed once attributed to a user
    ## otherwise it would break the configuration for that user. Technically, non-unique attributes like 'mail' can also
    ## be used but we don't recommend using them, we instead advise to use the attributes mentioned above
    ## (sAMAccountName and uid) to follow https://www.ietf.org/rfc/rfc2307.txt.
    username_attribute: uid

    ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users.
    ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users.
    additional_users_dn: ou=people

    ## The users filter used in search queries to find the user profile based on input filled in login form.
    ## Various placeholders are available in the user filter:
    ## - {input} is a placeholder replaced by what the user inputs in the login form.
    ## - {username_attribute} is a mandatory placeholder replaced by what is configured in `username_attribute`.
    ## - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    ##
    ## Recommended settings are as follows:
    ## - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
    ## - OpenLDAP:
    ##   - (&({username_attribute}={input})(objectClass=person))
    ##   - (&({username_attribute}={input})(objectClass=inetOrgPerson))
    ##
    ## To allow sign in both with username and email, one can use a filter like
    ## (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    users_filter: (&({username_attribute}={input})(objectClass=person))

    ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups.
    ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups.
    additional_groups_dn: ou=groups

    ## The groups filter used in search queries to find the groups of the user.
    ## - {input} is a placeholder replaced by what the user inputs in the login form.
    ## - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
    ## - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
    ## - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    ## - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    ##
    ## If your groups use the `groupOfUniqueNames` structure use this instead:
    ##    (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
    groups_filter: (&(member={dn})(objectclass=groupOfNames))
    # groups_filter: (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
    ## The attribute holding the name of the group.
    group_name_attribute: cn

    ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the
    ## first one returned by the LDAP server is used.
    mail_attribute: mail

    ## The attribute holding the display name of the user. This will be used to greet an authenticated user.
    # display_name_attribute: displayname

    ## The username and password of the admin user.
    user: cn=admin,dc=dev,dc=local
    ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
    password: admin
